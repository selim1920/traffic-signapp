apiVersion: v1
kind: ConfigMap
metadata:
  name: app-config
data:
  app.py: |
    import os
    from flask import Flask, request, jsonify
    import tensorflow as tf
    from PIL import Image
    import numpy as np
    import base64
    from io import BytesIO

    app = Flask(__name__)

    try:
        model = tf.keras.models.load_model('traffic_sign_model.h5')
        print("✅ Modèle 'traffic_sign_model.h5' chargé avec succès.")
    except Exception as e:
        print(f"❌ Erreur de chargement du modèle : {e}")
        model = None

    classes = {
        0: 'Speed limit (20km/h)', 1: 'Speed limit (30km/h)', 2: 'Speed limit (50km/h)', 3: 'Speed limit (60km/h)',
        4: 'Speed limit (70km/h)', 5: 'Speed limit (80km/h)', 6: 'End of speed limit (80km/h)', 7: 'Speed limit (100km/h)',
        8: 'Speed limit (120km/h)', 9: 'No passing', 10: 'No passing veh over 3.5 tons', 11: 'Right-of-way at intersection',
        12: 'Priority road', 13: 'Yield', 14: 'Stop', 15: 'No vehicles', 16: 'Veh > 3.5 tons prohibited', 17: 'No entry',
        18: 'General caution', 19: 'Dangerous curve left', 20: 'Dangerous curve right', 21: 'Double curve',
        22: 'Bumpy road', 23: 'Slippery road', 24: 'Road narrows on the right', 25: 'Road work', 26: 'Traffic signals',
        27: 'Pedestrians', 28: 'Children crossing', 29: 'Bicycles crossing', 30: 'Beware of ice/snow',
        31: 'Wild animals crossing', 32: 'End speed + passing limits', 33: 'Turn right ahead', 34: 'Turn left ahead',
        35: 'Ahead only', 36: 'Go straight or right', 37: 'Go straight or left', 38: 'Keep right', 39: 'Keep left',
        40: 'Roundabout mandatory', 41: 'End of no passing', 42: 'End no passing veh > 3.5 tons'
    }

    def prepare_image(image):
        image = image.resize((30, 30))
        image = np.array(image)
        image = np.expand_dims(image, axis=0)
        return image

    @app.route('/', methods=['GET'])
    def home():
        return "✅ Bienvenue sur l'API Traffic Sign - Le modèle est prêt !"

    @app.route('/predict', methods=['POST'])
    def predict():
        if not model:
            return jsonify({'error': 'Modèle non chargé'}), 500

        if 'image' not in request.json:
            return jsonify({'error': 'Aucune image fournie'}), 400

        try:
            img_data = base64.b64decode(request.json['image'])
            img = Image.open(BytesIO(img_data))
        except Exception as e:
            return jsonify({'error': f'Erreur de décodage : {str(e)}'}), 400

        processed_image = prepare_image(img)
        prediction = np.argmax(model.predict(processed_image), axis=-1)
        predicted_class = classes.get(int(prediction), "Classe inconnue")

        return jsonify({'prediction': predicted_class})

    if __name__ == '__main__':
        app.run(host='0.0.0.0', port=5000)
